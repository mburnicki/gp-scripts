
#############################################################################
#
#  $Id: gp-common 1.8 2013/12/06 09:33:10 martin TRASH $
#
#  Description:
#    Include file for the gp-* scripts which create graphs
#    from various log files.
#
#    (c) Martin Burnicki <martin.burnicki@meinberg.de>
#
# ---------------------------------------------------------------------------
#  $Log: gp-common $
#  Revision 1.8  2013/12/06 09:33:10  martin
#  Support loopstats poll interval.
#  Revision 1.7  2013/12/05 08:50:00  andreja
#  Support overriding xlabel.
#  Revision 1.6  2013/12/04 14:02:05  martin
#  Fixed variable names used for NTP peerstats.
#  Revision 1.5  2013/11/14 17:02:09  martin
#  Moved init function for NTP plots here.
#  Revision 1.4  2013/11/14 16:38:19  martin
#  A function to set title.
#  Revision 1.3  2013/11/14 16:10:39  martin
#  Support files created by mbgadjtm.
#  Revision 1.2  2010/03/24 12:07:49  martin
#  Moved set_mjd_tod() to gp-common.
#  Revision 1.1  2010/02/03 16:01:51  martin
#  Initial revision.
#
#############################################################################

basedir="."
auto_range='[*:*]'

if test -z "$lmargin"; then
  lmargin=13;
fi;

if test -z "$rmargin"; then
  rmargin=3;
fi;

loc_gp_opts=$basedir/`dirname $1`/gp_opts

if test -f $loc_gp_opts; then
  . $loc_gp_opts
fi

if test -z "$x"; then
  x=$auto_range;
fi;

if test -z "$std_tick"; then
  std_tick='156250';
fi

if test -z "$delta_t_offs"; then
  delta_t_offs='0';
fi

if test -z "$frame_opts"; then
  frame_opts="set grid; set nokey; set lmargin $lmargin; set rmargin $rmargin;"
fi


set_this_title()
{
  if test -z "$title"; then
    this_title="File: $1"
  else
    this_title="$title"
  fi
}


set_this_xlabel_ntp()
{
  if test -z "$xlabel"; then
    this_xlabel="t - MJD $this_mjd TOD $this_tod [s]"
  else
    this_xlabel="$xlabel"
  fi
}


set_this_xlabel_mbgadjtm()
{
  if test -z "$xlabel"; then
    this_xlabel='time [s]'
  else
    this_xlabel="$xlabel"
  fi
}


set_term_opts()
{
  case "$term" in
    'ps')
      term_opts="set terminal postscript enhanced color; set output \"$1.ps\";";
      echo "Output goes to: $1.ps";
    ;;

    'eps')
      term_opts="set terminal postscript eps enhanced color; set output \"$1.eps\";";
      echo "Output goes to: $1.eps";
    ;;

    'pbm')
      term_opts="set terminal pbm small color; set output \"$1.pbm\";";
      echo "Output goes to: $1.pbm";
    ;;

    *)
      term_opts=;
    ;;
  esac;
}


set_mjd_tod()
{
  ## read MJD and start time of day from the loopstats file
  IFS=' .' read mjd_from_file tod_from_file dummy < $1;

  ## unless this has been overridden on the
  if test -z "$mjd"; then
    this_mjd=$mjd_from_file;
    echo "MJD $this_mjd set from file";
  else
    this_mjd=$mjd;
  fi;

  if test -z "$tod"; then
    this_tod=$tod_from_file;
    echo "TOD $this_tod set from file";
  else
    this_tod=$tod;
  fi;
}


init_mbgadjtm_graph()
{
  set_term_opts $1
  set_this_title $1

  delta_t_col='4'
  delta_t_vals="(\$$delta_t_col/10000)"
  delta_t_label='delta t [ms]'
  delta_t_format='%.3f'

  if test -z "$delta_t"; then
    delta_t=$auto_range
  fi


  tick_col='8'
  tick_vals="(\$$tick_col)"
  tick_label='tick val'
  tick_format='%.0f'

  # Unless auto_range is enabled, delta tick is used to specify
  # the tick range to be displayed, e.g. std_tick +/- delta_tick
  if test -z "$delta_tick"; then
    delta_tick='500'
    #delta_tick='200'
    #delta_tick='100'
    #delta_tick='50'
    #delta_tick='30'
    #delta_tick='20'
    delta_tick='10'
    #delta_tick='7'
  fi

  if test -z "$tick"; then
    tick="[$std_tick-$delta_tick:$std_tick+$delta_tick]"
    # tick=$auto_range
  fi


  acc_time_col='6'
  acc_time_vals="(\$$acc_time_col)"
  acc_time_label='acc. time [us]'
  acc_time_format='%.0f'

  # Range of time required to access a PCI board.
  if test -z "$acc_time"; then
    acc_time=$auto_range
  fi

  set_this_xlabel_mbgadjtm
  this_format_x="%.0f"
}


init_ntp_graph()
{
  set_mjd_tod $1
  set_term_opts $1
  set_this_title $1

  mjd_col='1';
  tod_col='2';
  x_vals="((\$$tod_col-$this_tod)+(\$$mjd_col-$this_mjd)*86400)";

  if test -z "$x"; then
    x=$auto_range;
  fi;


  loop_time_offs_col='3'
  loop_time_offs_vals="(\$$loop_time_offs_col*(-1000))"

  peer_time_offs_col='5'
  peer_time_offs_vals="(\$$peer_time_offs_col*(-1000))"

  if test -z "$time_offs"; then
    time_offs=$auto_range;
  fi;

  time_offs_label='time offs [ms]'
  time_offs_format='%.3f'

  if test -z "$time_offs"; then
    time_offs=$auto_range;
  fi;


  freq_offs_col='4'
  freq_offs_vals="(\$$freq_offs_col)"
  freq_offs_label='freq offs [PPM]'
  freq_offs_format='%.3f'

  if test -z "$freq_offs"; then
    freq_offs=$auto_range;
  fi;


  round_trip_col='6';
  round_trip_vals="(\$$round_trip_col)";
  round_trip_label='round trip [ms]'
  round_trip_format='%.3f'

  if test -z "$round_trip"; then
    round_trip=$auto_range;
  fi;


  poll_col='7'
  poll_vals="(\$$poll_col)";
  poll_label='poll'
  poll_format='%.0f'

  if test -z "$poll"; then
    poll=[2:11]
  fi;


  set_this_xlabel_ntp
  this_format_x="%.0f"
}

