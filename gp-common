
#############################################################################
#
#  Include file for the gp-* scripts that create graphs
#  from various log files.
#
#  (c) Martin Burnicki <martin.burnicki@meinberg.de>
#
#############################################################################

basedir="."
auto_range='[*:*]'

mjd_epoch='40587'


if test -z "${lmargin}"; then
  lmargin=13;
fi;

if test -z "${rmargin}"; then
  rmargin=3;
fi;

loc_gp_opts=${basedir}/`dirname $1`/gp_opts

if test -f ${loc_gp_opts}; then
  . ${loc_gp_opts}
fi

if test -z "${x}"; then
  x=${auto_range};
fi;

if test -z "${std_tick}"; then
  std_tick='156250';
fi

if test -z "${delta_t_offs}"; then
  delta_t_offs='0';
fi

if test -z "${frame_opts}"; then
  frame_opts="set grid; unset key; set lmargin $lmargin; set rmargin $rmargin;"
fi


set_this_title()
{
  if test -z "${title}"; then
    this_title="File: $1"
  else
    this_title="${title}"
  fi
}


set_this_xlabel_mjd_tod()
{
  if test -z "${xlabel}"; then
    this_xlabel="t - MJD ${this_mjd} TOD ${this_tod} [s]"
  else
    this_xlabel="${xlabel}"
  fi
}


set_this_xlabel_mbgadjtm()
{
  if test -z "${xlabel}"; then
    this_xlabel='time [s]'
  else
    this_xlabel="${xlabel}"
  fi
}


set_term_opts()
{
  if test -z "${output}"; then
    this_output=$1
  else
    this_output=${output}
  fi

  unset out_file
  unset term_size

  term_size_png="1024,640"

  case "${term}" in
    'pdf')
      term_type="pdfcairo enhanced color"
      out_file="${this_output}.pdf"
    ;;

    'ps')
      term_type="postscript enhanced color"
      out_file="${this_output}.ps"
    ;;

    'eps')
      term_type="postscript eps enhanced color"
      out_file="${this_output}.eps"
    ;;

    'png')
      term_type="png enhanced"
      term_size=${term_size_png}
      out_file="${this_output}.png"
    ;;

    'pngcairo')
      term_type="pngcairo enhanced color"
      term_size=${term_size_png}
      out_file="${this_output}.png"
    ;;

    'svg')
      term_type="svg enhanced"
      out_file="${this_output}.svg"
    ;;

    'pbm')
      term_type="pbm small color"
      out_file="${this_output}.pbm"
    ;;
  esac;

  term_opts="set output"

  if test -n "${out_file}"; then
    echo "Output goes to: \"${out_file}\""
    term_opts+=" \"${out_file}\""

    term_opts+="; "
    term_opts+="set terminal ${term_type}"

    if test -n "${term_size}"; then
      size=${size:-${term_size}}
      term_opts+=" size ${size}"
      echo "Output size: ${size}"
    fi
  fi

  term_opts+="; "
  term_opts+="set style line 1 lt 1 lc rgb \"red\" lw 1; "
  term_opts+="set style line 2 lt 1 lc rgb \"blue\" lw 1; "
}


set_mjd_tod()
{
  # Read MJD and start time of day from the first line
  # of the data file which is not marked as comment.

  comment_pattern='^#.*$'
  i=0

  while IFS=' .' read -r mjd_from_file tod_from_file dummy; do
    if ! [[ ${mjd_from_file} =~ $comment_pattern ]]; then
    #  echo "DBG: line $i: break on ${mjd_from_file} ${tod_from_file}"
      break
    #else
    #  echo "DBG: line $i: skipping ${mjd_from_file} ${tod_from_file}"
    fi
    let i+=1
  done < "$1"

  # unless this has been overridden on the command line
  if test -z "${mjd}"; then
    this_mjd=${mjd_from_file};
    echo "MJD ${this_mjd} set from file";
  else
    this_mjd=${mjd};
  fi;

  if test -z "${tod}"; then
    this_tod=${tod_from_file};
    echo "TOD ${this_tod} set from file";
  else
    this_tod=${tod};
  fi;
}


init_mbgadjtm_graph()
{
  set_term_opts $1
  set_this_title $1

  delta_t_col='4'
  delta_t_vals="(\$${delta_t_col}/10000)"
  delta_t_label='delta t [ms]'
  delta_t_format='%.3f'

  if test -z "${delta_t}"; then
    delta_t=${auto_range}
  fi


  tick_col='8'
  tick_vals="(\$${tick_col})"
  tick_label='tick val'
  tick_format='%.0f'

  # Unless auto_range is enabled, delta tick is used to specify
  # the tick range to be displayed, e.g. std_tick +/- delta_tick
  if test -z "${delta_tick}"; then
    delta_tick='500'
    #delta_tick='200'
    #delta_tick='100'
    #delta_tick='50'
    #delta_tick='30'
    #delta_tick='20'
    delta_tick='10'
    #delta_tick='7'
  fi

  if test -z "${tick}"; then
    tick="[${std_tick}-${delta_tick}:${std_tick}+${delta_tick}]"
    # tick=${auto_range}
  fi


  acc_time_col='6'
  acc_time_vals="(\$${acc_time_col})"
  acc_time_label='acc. time [us]'
  acc_time_format='%.0f'

  # Range of time required to access a PCI board.
  if test -z "${acc_time}"; then
    acc_time=${auto_range}
  fi

  set_this_xlabel_mbgadjtm
  this_format_x="%.0f"
}


init_graph_ntp()
{
  set_mjd_tod $1
  set_term_opts $1
  set_this_title $1

  mjd_col='1'
  tod_col='2'
  x_vals="((\$${tod_col}-${this_tod})+(\$${mjd_col}-${this_mjd})*86400)";

  if test -z "${x}"; then
    x=${auto_range};
  fi;


  loop_time_offs_col='3'
  loop_time_offs_vals="(\$${loop_time_offs_col}*(+1000))"

  peer_time_offs_col='5'
  peer_time_offs_vals="(\$${peer_time_offs_col}*(+1000))"

  time_offs_label='time offs [ms]'
  time_offs_format='%.3f'

  if test -z "${time_offs}"; then
    time_offs=${auto_range};
  fi;


  freq_offs_col='4'
  freq_offs_vals="(\$${freq_offs_col})"
  freq_offs_label='freq offs [PPM]'
  freq_offs_format='%.3f'

  if test -z "${freq_offs}"; then
    freq_offs=${auto_range};
  fi;


  round_trip_col='6';
  round_trip_vals="(\$${round_trip_col})";
  round_trip_label='round trip [ms]'
  round_trip_format='%.3f'

  if test -z "${round_trip}"; then
    round_trip=${auto_range};
  fi;


  poll_col='7'
  poll_vals="(\$${poll_col})";
  poll_label='poll'
  poll_format='%.0f'

  if test -z "${poll}"; then
    poll=[2:11]
  fi;


  set_this_xlabel_mjd_tod
  this_format_x="%.0f"
}


# MRS stuff

# data:
gps_col='3'
gps_label='GPS offs [us]'

pps_col='4'
pps_label='PPS offs [us]'

irig_col='5'
irig_label='IRIG offs [us]'

ntp_col='6'
ntp_label='NTP offs [us]'

ptp_col='7'
ptp_label='PTP offs [us]'

frq_col='8'
frq_label='FRQ offs [us]'


# usage: select_t1( 't1', src )
select_t1()
{
# assume $1 is 't1'
  case "$2" in
    'gps')
      t1_label="${gps_label}";
      t1_col="${gps_col}";
    ;;

    'pps')
      t1_label="${pps_label}";
      t1_col="${pps_col}";
    ;;

    'irig')
      t1_label="${irig_label}";
      t1_col="${irig_col}";
    ;;

    'ntp')
      t1_label=${ntp_label};
      t1_col=${ntp_col};
    ;;

    'ptp')
      t1_label="${ptp_label}";
      t1_col="${ptp_col}";
    ;;

    'frq')
      t1_label="${frq_label}";
      t1_col="${frq_col}";
    ;;

    *)
      echo "Select time t1: invalid $2";
    ;;
  esac;

  if test -z "${t1_offs}"; then
    t1_offs="${time_offs}-${auto_range}";
  fi;

  if test -z "${t1_bias}"; then
    t1_bias='0';
  fi;

  t1_vals="(\$${t1_col}*1e6-${t1_bias})"
}


# usage: select_t2( 't2', src )
select_t2()
{
# assume $1 is 't2'
  case "$2" in
    'gps')
      t2_label="${gps_label}";
      t2_col="${gps_col}";
    ;;

    'pps')
      t2_label="${pps_label}";
      t2_col="${pps_col}";
    ;;

    'irig')
      t2_label="${irig_label}";
      t2_col="${irig_col}";
    ;;

    'ntp')
      t2_label="${ntp_label}";
      t2_col="${ntp_col}";
    ;;

    'ptp')
      t2_label="${ptp_label}";
      t2_col="${ptp_col}";
    ;;

    'frq')
      t2_label="${frq_label}";
      t2_col="${frq_col}";
    ;;

    *)
      echo "Select time t1: invalid $2";
    ;;
  esac;

  if test -z "${t2_offs}"; then
    t2_offs="${time_offs}-${auto_range}";
  fi;

  if test -z "${t2_bias}"; then
    t2_bias='0';
  fi;

  t2_vals="(\$${t2_col}*1e6-${t2_bias})";
}


# usage: select_time( t1, gps )
select_time()
{
  case "$1" in
    't1')
      select_t1 $1 $2;
    ;;

    't2')
      select_t2 $1 $2;
    ;;

    *)
      echo "Select time: invalid parameter 1: $1";
      exit 1;
    ;;
  esac

#  case "$2" in
#    'gps')
#      term_opts="set terminal postscript enhanced color";
#      ${1}_label="$gps_label";
#      ${1}_col="$gps_col";
#      echo "Select time $1: $2 -> t1_col = $t1_col = $gps_col";
#    ;;
#
#    *)
#      echo "Select time $1: $2";
#    ;;
#  esac;

}


init_graph_mrs()
{
  set_mjd_tod $1;
  set_term_opts $1;
  set_this_title $1

  mjd_col='1';
  tod_col='2';
# x_vals="((\$${tod_col}-${this_tod})+(\$${mjd_col}-${this_mjd})*86400)";
  x_vals="(((\$${tod_col}-${this_tod})+(\$${mjd_col}-${this_mjd})*86400)/3600)";

  if test -z "${x}"; then
    x=${auto_range};
  fi;

  select_time 't1' ${t1-'gps'}
  select_time 't2' ${t2-'ntp'}

  this_xlabel="t - MJD ${this_mjd} TOD ${this_tod} [s]"
  this_format_x='%.0f'
  # t1_format_y='%.3f'
  # t2_format_y='%.3f'
  t1_format_y='%.0f'
  t2_format_y='%.0f'


  if [[ ${t1_mean} != "" ]]; then
    hor_line_t1="f(x)=${t1_mean}; replot f(x) with lines linestyle 2;"
  fi

  if [[ ${t2_mean} != "" ]]; then
    hor_line_t2="f(x)=${t2_mean}; replot f(x) with lines linestyle 2;"
  fi

  set_this_xlabel_mjd_tod
}


